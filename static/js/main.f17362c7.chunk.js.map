{"version":3,"sources":["components/Word.js","helpers/helpers.js","components/Backdrop.js","components/Hangman.js","components/Buttons.js","store/actionTypes.js","store/actions.js","App.js","store/reducers.js","index.js"],"names":["Word","selectedWord","correctCharacters","className","split","map","letter","i","includes","toUpperCase","checkWin","correct","wrong","word","status","toLowerCase","join","forEach","length","Backdrop","wrongCharacters","setCanPlay","playAgain","successMessage","showCorrectWord","playable","useEffect","onClick","Hangman","errorLength","height","width","x1","y1","x2","y2","cx","cy","r","reduce","prev","curr","Buttons","handleButtonClicked","Array","fill","ele","index","e","String","fromCharCode","SAVEDATA","SET_ERROR_MESSAGE","SET_SELECTED_WORD","setSelectedWord","type","actionTypes","getWordsData","dispatch","axios","get","then","response","wordsData","data","catch","error","errorMessage","connect","state","wordsArray","actions","props","useState","setCorrectCharacters","setWrongLetters","canPlay","showNotification","setShowNotification","timeOutId","useRef","handleKeydown","useCallback","event","letterClicked","key","keyCode","which","keycode","notifcationHandler","present","window","addEventListener","removeEventListener","current","setTimeout","clearTimeout","preventDefault","initialState","reducer","action","Math","floor","random","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f17362c7.chunk.js","sourcesContent":["import React from 'react';\nimport './Word.css';\n\nconst Word = ({ selectedWord, correctCharacters }) => {\n\n  return (\n    <div className=\"word\">\n      {selectedWord.split('').map((letter, i) => \n          letter !== \" \" ?  (\n            <span className=\"letter\" key={i}>\n              {correctCharacters.includes(letter) ? letter.toUpperCase() : ''}\n            </span>\n          ) : (<span className=\"letters\" key={i}></span>)\n      )}\n    </div>\n  )\n}\n\nexport default Word\n","\nexport function checkWin(correct, wrong, word) {\n  let status = 'win';\n  \n  let splittedWord = word.toLowerCase().split(\" \")\n  splittedWord.join(\"\").split('').forEach(letter => {\n    if(!correct.includes(letter)){\n      status = '';\n    }\n  });\n  if(word.length === 0){\n    status=\"\";\n  }\n  if(wrong.length === 6) status = 'lose';\n\n  return status\n}","import React, { useEffect } from 'react';\nimport { checkWin } from '../helpers/helpers';\nimport './Backdrop.css';\n\nconst Backdrop = ({correctCharacters, wrongCharacters, selectedWord, setCanPlay, playAgain}) => {\n  let successMessage = '';\n  let showCorrectWord = '';\n  let playable = true;\n\n  if( checkWin(correctCharacters, wrongCharacters, selectedWord) === 'win' ) {\n    successMessage = 'Congratulations! You won! ðŸ˜ƒ';\n    playable = false;\n  } else if( checkWin(correctCharacters, wrongCharacters, selectedWord) === 'lose' ) {\n    successMessage = 'Oops, Please try again';\n    showCorrectWord = `Correct word was: ${selectedWord.toUpperCase()}`;\n    playable = false;\n  }\n\n  useEffect(() => {\n    setCanPlay(playable);\n  });\n\n  return (\n    <div className={`backdrop-div ${successMessage !== '' ? 'make-flex' : ''}`} >\n      <div className=\"backdrop-opener\">\n        <h2>{successMessage}</h2>\n        <h3>{showCorrectWord}</h3>\n        <button onClick={playAgain}>Play Again</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Backdrop\n","import React from 'react'\nimport './Hangman.css';\n\nconst Hangman = ({ wrongCharacters }) => {\n  const errorLength = wrongCharacters.length\n\n  return (\n    <div className=\"hangman-missed-letters-container\">\n      <svg height=\"250\" width=\"200\" className=\"human\">\n        <line x1=\"60\" y1=\"20\" x2=\"140\" y2=\"20\" />\n        <line x1=\"140\" y1=\"20\" x2=\"140\" y2=\"50\" />\n        <line x1=\"60\" y1=\"20\" x2=\"60\" y2=\"230\" />\n        <line x1=\"20\" y1=\"230\" x2=\"100\" y2=\"230\" />\n        {errorLength > 0 && <circle cx=\"140\" cy=\"70\" r=\"20\" />}\n        {errorLength > 1 && <line x1=\"140\" y1=\"90\" x2=\"140\" y2=\"150\" />}\n        {errorLength > 2 && <line x1=\"140\" y1=\"120\" x2=\"120\" y2=\"100\" />}\n        {errorLength > 3 && <line x1=\"140\" y1=\"120\" x2=\"160\" y2=\"100\" />}\n        {errorLength > 4 && <line x1=\"140\" y1=\"150\" x2=\"120\" y2=\"180\" />}\n        {errorLength > 5 && <line x1=\"140\" y1=\"150\" x2=\"160\" y2=\"180\" />}\n      </svg>\n      <div className=\"missed-letters\">\n        <div>\n          {errorLength > 0 &&\n            <p>Missed => <strong>{wrongCharacters\n              .map((letter, i) => <span key={i}>{letter}</span>)\n              .reduce((prev, curr) => prev === null ? [curr] : [prev, ', ', curr], null)}</strong></p>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Hangman\n","\r\nimport \"./Buttons.css\"\r\nimport React from 'react';\r\n\r\nconst Buttons = ({handleButtonClicked}) => {\r\n    return(\r\n        <div className=\"buttons-container\" >\r\n            {new Array(26).fill(1).map((ele, index) => {\r\n                return <button key={index} className=\"styled-buttons\" onClick={(e) => handleButtonClicked(e, String.fromCharCode(65+index))}>{String.fromCharCode(65+index)}</button>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons","export const SAVEDATA = \"SAVEDATA\"\r\nexport const SET_ERROR_MESSAGE = \"SET_ERROR_MESSAGE\"\r\nexport const SET_SELECTED_WORD = \"SET_SELECTED_WORD\"","import * as actionTypes from './actionTypes';\r\n\r\nimport axios from 'axios';\r\n\r\nexport const saveData = (wordsData) => {\r\n    return{\r\n        type: actionTypes.SAVEDATA ,\r\n        data: wordsData\r\n    }\r\n}\r\n\r\nexport const setErrorMessage = (errorMessage) => {\r\n    return{\r\n        type: actionTypes.SET_ERROR_MESSAGE ,\r\n        errorMessage: errorMessage\r\n    }\r\n}\r\n\r\nexport const setSelectedWord = () => {\r\n    return{\r\n        type: actionTypes.SET_SELECTED_WORD\r\n    }\r\n}\r\n\r\nexport const getWordsData = () => {\r\n    return (dispatch) => {\r\n        axios.get('https://api.datamuse.com/words?ml=fruit').then((response) => {\r\n            dispatch(saveData(response.data.map(ele => ele.word)))\r\n            dispatch(setSelectedWord())\r\n        }).catch((error) => {\r\n            dispatch(setErrorMessage(error))\r\n        })\r\n    }\r\n}","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport Word from './components/Word';\nimport Backdrop from './components/Backdrop';\nimport './App.css';\nimport Hangman from './components/Hangman';\nimport Buttons from './components/Buttons';\n\nimport {connect} from 'react-redux';\nimport * as actions from './store/actions';\n\nconst App = (props) => {\n\n  const [correctCharacters, setCorrectCharacters] = useState([]);\n  const [wrongCharacters, setWrongLetters] = useState([]);\n  const [canPlay, setCanPlay] = useState(true);\n  const [showNotification, setShowNotification] = useState(false);\n  const timeOutId = useRef(null)\n\n  \n  const handleKeydown = useCallback((event, letterClicked) => {\n    const key = event.key;\n    const keyCode = event.which || event.keycode  // for mozilla and other browsers\n    if (canPlay && ((keyCode >= 65 && keyCode <= 90) || letterClicked)) { \n      let letter;\n      if(letterClicked){\n        letter = letterClicked.toLowerCase();\n      }  else{\n        letter = key.toLowerCase();\n      }\n      \n      if (props.selectedWord.includes(letter)) {\n        if (!correctCharacters.includes(letter)) {\n          setCorrectCharacters(present => [...present, letter]);  // array which has correct characters entered\n        } else {\n          notifcationHandler();   // To show notification if key is already present\n        }\n      } else {\n        if (!wrongCharacters.includes(letter)) {\n          setWrongLetters(present => [...present, letter]);  // array which has wrong characters entered\n        } else {\n          notifcationHandler();  // To show notification if key is already present\n        }\n      }\n    }\n  })\n  \n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => window.removeEventListener('keydown', handleKeydown);   // Clean up function which can run clean up the previous effect and run the new Effect\n  }, [handleKeydown]);\n\n  useEffect(() => {\n    props.getWordsData();\n  }, [])\n\n\n\n  const notifcationHandler = useCallback(() => {\n    setShowNotification(true);\n    timeOutId.current = setTimeout(() => {\n      setShowNotification(false);\n      clearTimeout(timeOutId.current)\n    }, 1000);\n  })\n\n  // correctCharacters, wrongCharacters, canPlay\n\n  const playAgain = () => {   // ReInitialize all values to default\n    setCanPlay(true);\n    setCorrectCharacters([]);\n    setWrongLetters([]);\n    props.setSelectedWord()\n  }\n\n  const handleButtonClicked = (e, letter) => {\n    e.preventDefault();\n    handleKeydown(e, letter)\n  }\n\n  return (\n    <>\n      <h1>Hangman - Find the hidden word</h1>\n      <h2>Type/Click a letter to start</h2>\n      <hr className=\"seperator\"/>\n      <div className=\"hangman-container\">\n        <Hangman wrongCharacters={wrongCharacters} />   {/*  for body part and missded characters  */}\n        <Word {...{   \n          selectedWord: props.selectedWord,\n          correctCharacters\n        }} />     {/*  To show Letters pressed  */}\n        \n      </div>\n      <hr  className=\"seperator\"/>\n      <Buttons handleButtonClicked={handleButtonClicked}/>\n      <Backdrop {...{\n        correctCharacters, \n        wrongCharacters, \n        selectedWord: props.selectedWord, \n        setCanPlay, \n        playAgain}} />\n      <div className={`notification ${showNotification ? 'show' : ''}`}>\n        <p>You have already entered this letter</p>\n      </div>\n    </>\n  );\n}\n\n\nconst mapStateToProps = (state) => {\n  return{\n    wordsArray: state.wordsArray,\n    selectedWord: state.selectedWord,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    getWordsData: () => dispatch(actions.getWordsData()),\n    setSelectedWord: () => dispatch(actions.setSelectedWord())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    wordsArray: [],\r\n    errorMessage: \"\",\r\n    selectedWord: \"\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.SAVEDATA:\r\n            return{\r\n                ...state,\r\n                wordsArray: action.data\r\n            };\r\n        case actionTypes.SET_ERROR_MESSAGE:\r\n            return{\r\n                ...state,\r\n                errorMessage: action.errorMessage\r\n            };\r\n        case actionTypes.SET_SELECTED_WORD:\r\n            return{\r\n                ...state,\r\n                selectedWord: state.wordsArray[Math.floor(Math.random() * state.wordsArray.length)]\r\n                // selectedWord: \"sour cheRRY\".toLowerCase()\r\n                \r\n            };\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from \"./store/reducers\"\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}